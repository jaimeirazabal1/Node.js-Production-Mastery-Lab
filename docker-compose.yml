services:
  frontend-dev:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app # Monta el código del frontend en el contenedor
      - /app/node_modules # Evita sobrescribir node_modules
    environment:
      - VITE_API_URL=http://localhost:4000
    command: npm run dev # Usa el comando de desarrollo
    networks:
      - app-network
  backend:
    build: ./backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret123
      - POSTGRES_DB=prod_db
    depends_on:
      postgres:
        condition: service_healthy # Espera a que PostgreSQL esté saludable
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret123
      - POSTGRES_DB=prod_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql  # Montar el script de inicialización
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d prod_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:4000
    networks:
      - app-network
    depends_on:
      - backend

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
